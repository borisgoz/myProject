git init
git add file
git add .
git commit -m "commit"
git log

git add <file>|<dir>
git reset <file>|<dir>
git commit

git add file
git rm file  -- delete file by commit. file still be
git mv old-file new-file
git rm -r  --> rmdir -r
git rm -r --cached --> from cashe

git commit -am 

git checkout <rev> -- <file>
git checkout <rev>
git checkout master

git log
git log --oneline
git log -1 -p
git log -S 'str'
git log -- <file>

git blame <rev> <file>
git blame --reverse <rev>..<HEAD> -- <file> --> when line was deleted

git difftool
git diff <rev>
git diff <rev> <rev> -- file
git diff --dirdiff

## settings to use diffmerge for win
[merge]
tool = diffmerge
[diff]
tool = diffmerge
[mergetool]
prompt = false
[difftool]
prompt = false
[difftool “diffmerge”]
cmd = C:/Program\ Files/SourceGear/Common/DiffMerge/sgdm.exe “$LOCAL” “$REMOTE”
[mergetool “diffmerge”]
cmd = C:/Program\ Files/SourceGear/Common/DiffMerge/sgdm.exe -merge -result="$MERGED" “$LOCAL” “$BASE” “$REMOTE

-----------

on linux

# Add the following to your .gitconfig file.
[diff]
        tool = meld
[difftool]
        prompt = false
[difftool "meld"]
        cmd = meld "$LOCAL" "$REMOTE"
[merge]
        tool = meld
[mergetool]
        prompt = false
[mergetool "meld"]
         cmd = meld "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"

--------------------

git reflog
git log -3 --oneline

git reset -- file
git reset <rev>

git add file       --> add    file to   Staging Area (index)
git reset -- file  --> remove file from Staging Area (index)

Index ---------- Working Tree ----- Repository
add/commit...    my-files           already commited and added files

git ls-tree HEAD

git reset --hard   --> reset all files to previus ver

# move HEAD to rev
# reset index to rev
git reset <rev>

# reset index + working tree. files to prev. ver.
git reset --hard <rev>

# dont touch index + working tree. HEAD--
git reset --soft <rev>

git reset HEAD^
git reset HEAD~1 --> mevatel last commit

-----------------------------------

#update last commit
git commit --amend -m "New commit message"
git push --force origin HEAD

----

git branch <branch>
git checkout <branch>
git checkout -b <branch>
git merge-branc <branch> <branch>

